#This is a an agent based model of venture capitals and startups developed in MESA 

#Firstly, let us import all the necessary packages 
from mesa import Agent, Model
from mesa.time import BaseScheduler

#Now, let us in this section define our two set of agents i.e. venture capitals and startups as well as their attributes

#Agent venture capital has inherited attributes unique_id and model and has an additional attribute "requirement on startup potential"
class VentureCapital(Agent):
    def __init__(self, unique_id, model, requirement_on_startup_potential):
        super().__init__(unique_id, model) 
        self.requirement_on_startup_potential = requirement_on_startup_potential
    
    #At every step, agent sees some 
    def step(self):
        mu, sigma = 0, 2 # mean and standard deviation
        noise = np.random.normal(mu, sigma, 1000) # random error, imperfect information about startup
        
        #Defining a range in which VC can operate    
        neighbors = []
        x, y = self.pos
        for dx in [-1, 0, 1]:
            for dy in [-1, 0, 1]:
                neighbors.append((x+dx, y+dy))
        
        #if precieved potential of startup that seeks funding is higher or equal than what VC requires then VC moves to the position on the grid that belongs to the given startup 
        if startup_potential + noise >= requirement_on_startup_potential and coord_iter(Startup) in neighbors:
            space.Grid.move_agent(self, coord_iter(Startup))
            

#Agent Startup has inherited attributes unique_id and model and has an addition attribute "startup potential"
class Startup(Agent):
    def __init__(self, unique_id, model, startup_potetnial):
        super().__init__(unique_id, model) 
        self.startup_potential = startup_potential
    
    #Every step, some group of agents seeks funding 
    def step(self):
        print("I am a startup " + str(self.unique_id) + " and I am looking for funding")
        
        
class Model(Model):
    def __init__(self, N, M, width, height):
        #Set the numebr of startups and venture cpitals 
        self.num_VentureCapital = N
        self.num_Startup = M
        #We will left out the gird for now
        self.grid = MultiGrid(width, height, True)
        self.schedule = BaseScheduler(self)
        #In each time step randomly selects the order in which agents move 
        
        #Creates Agents 
        for i in range (self.num_VentureCapital):
            a = VentureCapital(i, self, random.randint(0,100))
            self.schedule.add(a) #This adds agent a into a schedule, if a wouldn't be there then it would be skipped from movement
            
            #Following lines of code enable us to place agents or random place on the grid
            x=self.random.randrange(self.grid.width)
            y=self.random.randrange(self.grid.height)
            self.grid.place_agent(a, (x,y))
            
        for j in range (self.num_VentureCapital + 1, self.num_VentureCapital + self.num_Startup + 1):
            b = Startup(j, self, random.randint(0,100))
            self.schedule.add(b)
            
            #This selects a random x and y coordinate for agent 
            x = self.random.randrange(self.grid.width)
            y = self.random.randrange(self.grid.height)
            
            #This places the agent on this random coordinate 
            self.grid.place_agent(b, (x,y))
            
    def step(self):
        #advances model by one step
        self.schedule.step()
       

first_model = Model(100,3000, 100, 100)
for i in range(10):
    first_model.step()
    

#This part deals with visualization of the grid 
    
from mesa.visualization.modules import CanvasGrid
from mesa.visualization.ModularVisualization import ModularServer
import numpy as np
import matplotlib.pyplot as plt

#portraying agents in a circular shape 
def agent_portrayal(agent):
    portrayal = {"Shape": "circle",
                 "Filled": "true",
                 "Layer": 0,
                 "Color": "red",
                 "r": 0.5}
    return portrayal

grid = CanvasGrid(agent_portrayal, 100, 100, 500, 500)
server = ModularServer(Model,
                       [grid],
                       "Model",
                       {"N":100, "width":100, "height":100})
server.port = 8521 # The default
server.launch()


#visualizing density of agetns on the grid 
agent_counts = np.zeros((first_model.grid.width, first_model.grid.height))
for cell in first_model.grid.coord_iter():
    cell_content, x, y = cell
    agent_count = len(cell_content)
    agent_counts[x][y] = agent_count
plt.imshow(agent_counts, interpolation='nearest')
plt.colorbar()
